prima query

WITH date("2018-06-15") AS today
WITH 
    CASE 
        WHEN today.month = 1 THEN date(toString(today.year-1) + "-12" + "-01")
        ELSE date(toString(today.year) + "-" + toString(today.month - 1) + "-01")
    END AS first_of_previous_month,

    date(toString(today.year) + "-" + toString(today.month) + "-01") AS first_of_current_month
WITH
    first_of_previous_month,
    first_of_current_month,
    duration.inDays(first_of_previous_month, first_of_current_month).days as days_in_previous_month

MATCH (c:Customer)-[tx:Make_transaction]->(:Terminal)
WHERE 
    date(tx.tx_datetime) >= first_of_previous_month AND 
    date(tx.tx_datetime) < first_of_current_month
with c, 
     sum(tx.tx_amount) AS amount_previous_month,
     COUNT(*) AS spending_frequency_previous_month,
     c.mean_amount * c.mean_nb_tx_per_day * days_in_previous_month AS mean_amount_per_month,
     c.mean_nb_tx_per_day * days_in_previous_month AS mean_spending_frequency_per_month
RETURN 
     c, 
     spending_frequency_previous_month < mean_spending_frequency_per_month AS is_under_spending_frequency_per_month,
     amount_previous_month < mean_amount_per_month AS is_under_mean_amount_per_month




WITH date("2018-06-15") AS today

MATCH (c:Customer)-[tx_previous_month_different_year:Make_transaction]->(:Terminal)
WHERE 
    tx_previous_month_different_year.tx_datetime.month = today.month - 1
    //AND tx_same_month_different_year.tx_datetime.year < today.year
WITH
  today,
  c, 
  tx_previous_month_different_year.tx_datetime.year as year, 
  SUM(tx_previous_month_different_year.tx_amount) AS total_amount_same_previous_month, 
  COUNT(*) AS monthly_spending_freq_same_previous_month
WITH
  today,
  c, 
  AVG(total_amount_same_previous_month) AS avg_total_amount_same_period, 
  AVG(monthly_spending_freq_same_previous_month) AS avg_monthly_spending_freq_same_period

MATCH (c)-[tx:Make_transaction]->(:Terminal)
WHERE 
    tx.tx_datetime.month = today.month -1 AND 
    tx.tx_datetime.year = today.year
WITH
     c, 
     SUM(tx.tx_amount) AS total_amount_previous_month,
     COUNT(*) AS monthly_spending_freq_previous_month,
     avg_total_amount_same_period,
     avg_monthly_spending_freq_same_period
RETURN
     c, 
     total_amount_previous_month < avg_total_amount_same_period AS is_under_avg_total_amount_same_period,
     monthly_spending_freq_previous_month < avg_monthly_spending_freq_same_period AS is_under_avg_monthly_freq





WITH date("2023-06-15") AS today
WITH 
    CASE 
        WHEN today.month = 1 THEN date(toString(today.year-1) + "-12" + "-01")
        ELSE date(toString(today.year) + "-" + toString(today.month - 1) + "-01")
    END AS first_of_previous_month
MATCH (c:Customer)-[tx_prev_month_all_prev_year:Make_transaction]->(:Terminal)
WHERE 
    tx_prev_month_all_prev_year.tx_datetime.month = first_of_previous_month.month
    AND tx_prev_month_all_prev_year.tx_datetime.year < first_of_previous_month.year
WITH
  first_of_previous_month,
  c, 
  tx_prev_month_all_prev_year.tx_datetime.year as year, 
  SUM(tx_prev_month_all_prev_year.tx_amount) AS tx_prev_month_prev_year_total_amount, 
  COUNT(*) AS tx_prev_month_prev_year_montly_freq
WITH
  first_of_previous_month,
  c, 
  AVG(tx_prev_month_prev_year_total_amount) AS tx_prev_month_all_prev_year_total_amount_avg, 
  AVG(tx_prev_month_prev_year_montly_freq) AS tx_prev_month_all_prev_year_montly_freq_avg

MATCH (c)-[tx:Make_transaction]->(:Terminal)
WHERE 
    tx.tx_datetime.month = first_of_previous_month.month AND 
    tx.tx_datetime.year = first_of_previous_month.year
WITH
     c, 
     SUM(tx.tx_amount) AS total_amount_prev_month,
     COUNT(*) AS monthly_freq_prev_month,
     tx_prev_month_all_prev_year_total_amount_avg,
     tx_prev_month_all_prev_year_montly_freq_avg
RETURN
     c, 
     total_amount_prev_month < tx_prev_month_all_prev_year_total_amount_avg AS is_under_total_amount_avg_of_same_period,
     monthly_freq_prev_month < tx_prev_month_all_prev_year_montly_freq_avg AS is_under_monthly_freq_avg_of_same_period






WITH date("2023-06-15") AS today
WITH 
    CASE 
        WHEN today.month = 1 THEN date(toString(today.year-1) + "-12" + "-01")
        ELSE date(toString(today.year) + "-" + toString(today.month - 1) + "-01")
    END AS first_of_previous_month
MATCH (c:Customer)-[tx_prev_month_all_prev_year:Make_transaction]->(:Terminal)
WHERE 
    tx_prev_month_all_prev_year.tx_datetime.month = first_of_previous_month.month
    AND tx_prev_month_all_prev_year.tx_datetime.year < first_of_previous_month.year
WITH
  first_of_previous_month,
  c, 
  tx_prev_month_all_prev_year.tx_datetime.year as year, 
  SUM(tx_prev_month_all_prev_year.tx_amount) AS tx_prev_month_prev_year_total_amount, 
  COUNT(*) AS tx_prev_month_prev_year_montly_freq
WITH
  first_of_previous_month,
  c, 
  AVG(tx_prev_month_prev_year_total_amount) AS tx_prev_month_all_prev_year_total_amount_avg, 
  AVG(tx_prev_month_prev_year_montly_freq) AS tx_prev_month_all_prev_year_montly_freq_avg

MATCH (c)-[tx:Make_transaction]->(:Terminal)
WHERE 
    tx.tx_datetime.month = first_of_previous_month.month AND 
    tx.tx_datetime.year = first_of_previous_month.year
WITH
     c, 
     SUM(tx.tx_amount) AS total_amount_prev_month,
     COUNT(*) AS monthly_freq_prev_month,
     tx_prev_month_all_prev_year_total_amount_avg,
     tx_prev_month_all_prev_year_montly_freq_avg
RETURN
     c, 
     total_amount_prev_month < tx_prev_month_all_prev_year_total_amount_avg AS is_under_total_amount_avg_of_same_period,
     monthly_freq_prev_month < tx_prev_month_all_prev_year_montly_freq_avg AS is_under_monthly_freq_avg_of_same_period





WITH date("2023-06-15") AS today
WITH 
    CASE 
        WHEN today.month = 1 THEN date(toString(today.year-1) + "-12" + "-01")
        ELSE date(toString(today.year) + "-" + toString(today.month - 1) + "-01")
    END AS first_of_previous_month
MATCH (c:Customer)-[tx_prev_month_all_prev_year:Make_transaction]->(:Terminal)
WHERE 
    tx_prev_month_all_prev_year.tx_datetime.month = first_of_previous_month.month
    AND tx_prev_month_all_prev_year.tx_datetime.year < first_of_previous_month.year
WITH
  first_of_previous_month,
  c, 
  tx_prev_month_all_prev_year.tx_datetime.year as year, 
  SUM(tx_prev_month_all_prev_year.tx_amount) AS tx_prev_month_prev_year_total_amount, 
  COUNT(*) AS tx_prev_month_prev_year_montly_freq
WITH
  first_of_previous_month,
  c, 
  AVG(tx_prev_month_prev_year_total_amount) AS tx_prev_month_all_prev_year_total_amount_avg, 
  AVG(tx_prev_month_prev_year_montly_freq) AS tx_prev_month_all_prev_year_montly_freq_avg

MATCH (c)-[tx:Make_transaction]->(:Terminal)
WHERE 
    tx.tx_datetime.month = first_of_previous_month.month AND 
    tx.tx_datetime.year = first_of_previous_month.year
WITH
     c, 
     SUM(tx.tx_amount) AS total_amount_prev_month,
     COUNT(*) AS monthly_freq_prev_month,
     tx_prev_month_all_prev_year_total_amount_avg,
     tx_prev_month_all_prev_year_montly_freq_avg
RETURN
     c, 
     total_amount_prev_month < tx_prev_month_all_prev_year_total_amount_avg AS is_under_total_amount_avg_of_same_period,
     monthly_freq_prev_month < tx_prev_month_all_prev_year_montly_freq_avg AS is_under_monthly_freq_avg_of_same_period









WITH date("2023-06-15") AS today
WITH 
    CASE 
        WHEN today.month = 1 THEN date(toString(today.year-1) + "-12" + "-01")
        ELSE date(toString(today.year) + "-" + toString(today.month - 1) + "-01")
    END AS first_of_previous_month

MATCH (c:Customer)

OPTIONAL MATCH (c)-[tx_prev_month_all_prev_year:Make_transaction]->(:Terminal)
WHERE 
    tx_prev_month_all_prev_year.tx_datetime.month = first_of_previous_month.month
    AND tx_prev_month_all_prev_year.tx_datetime.year < first_of_previous_month.year
WITH
    first_of_previous_month,
    c,
    tx_prev_month_all_prev_year.tx_datetime.year as year, 
    CASE 
      WHEN COUNT(tx_prev_month_all_prev_year.tx_amount)>0 THEN SUM(tx_prev_month_all_prev_year.tx_amount)
      ELSE NULL
    END AS tx_prev_month_prev_year_total_amount, 

    CASE 
      WHEN COUNT(tx_prev_month_all_prev_year.tx_amount)>0 THEN COUNT(tx_prev_month_all_prev_year)
      ELSE NULL
    END AS tx_prev_month_prev_year_montly_freq
WITH
  first_of_previous_month,
  c, 
  CASE 
    WHEN COUNT(tx_prev_month_prev_year_total_amount) > 0 THEN AVG(tx_prev_month_prev_year_total_amount)
    ELSE NULL
    END AS tx_prev_month_all_prev_year_total_amount_avg, 
    CASE 
        WHEN COUNT(tx_prev_month_prev_year_montly_freq) > 0 THEN AVG(tx_prev_month_prev_year_montly_freq)
        ELSE NULL
    END AS tx_prev_month_all_prev_year_montly_freq_avg

OPTIONAL MATCH (c)-[tx:Make_transaction]->(:Terminal)
WHERE 
    tx.tx_datetime.month = first_of_previous_month.month AND 
    tx.tx_datetime.year = first_of_previous_month.year
WITH
    c, 
    CASE 
        WHEN COUNT(tx.tx_amount) > 0 THEN SUM(tx.tx_amount)
        ELSE NULL
    END AS total_amount_prev_month, 
    CASE 
        WHEN COUNT(tx.tx_amount) > 0 THEN COUNT(tx)
        ELSE NULL
    END AS monthly_freq_prev_month,
    tx_prev_month_all_prev_year_total_amount_avg,
    tx_prev_month_all_prev_year_montly_freq_avg

RETURN
    c, 
    CASE 
        WHEN total_amount_prev_month IS NULL OR tx_prev_month_all_prev_year_total_amount_avg IS NULL THEN NULL
        ELSE total_amount_prev_month < tx_prev_month_all_prev_year_total_amount_avg
    END AS is_under_total_amount_avg_of_same_period,

    CASE 
        WHEN monthly_freq_prev_month IS NULL OR tx_prev_month_all_prev_year_montly_freq_avg IS NULL THEN NULL
        ELSE monthly_freq_prev_month < tx_prev_month_all_prev_year_montly_freq_avg
    END AS is_under_monthly_freq_avg_of_same_period




WITH date("2023-06-15") AS today
WITH 
    CASE 
        WHEN today.month = 1 THEN date(toString(today.year-1) + "-12" + "-01")
        ELSE date(toString(today.year) + "-" + toString(today.month - 1) + "-01")
    END AS first_of_previous_month

MATCH (c:Customer)

OPTIONAL MATCH (c)-[tx_prev_month_all_prev_year:Make_transaction]->(:Terminal)
WHERE 
    tx_prev_month_all_prev_year.tx_datetime.month = first_of_previous_month.month
    AND tx_prev_month_all_prev_year.tx_datetime.year < first_of_previous_month.year
WITH
    first_of_previous_month,
    c,
    tx_prev_month_all_prev_year.tx_datetime.year as year, 
    CASE 
      WHEN COUNT(tx_prev_month_all_prev_year)>0 THEN SUM(tx_prev_month_all_prev_year.tx_amount)
      ELSE NULL
    END AS tx_prev_month_prev_year_total_amount, 

    CASE 
      WHEN  COUNT(tx_prev_month_all_prev_year)>0 THEN COUNT(tx_prev_month_all_prev_year)
      ELSE NULL
    END AS tx_prev_month_prev_year_montly_freq
WITH
  first_of_previous_month,
  c, 
  AVG(tx_prev_month_prev_year_total_amount) AS tx_prev_month_all_prev_year_total_amount_avg, 
  AVG(tx_prev_month_prev_year_montly_freq) AS tx_prev_month_all_prev_year_montly_freq_avg

OPTIONAL MATCH (c)-[tx:Make_transaction]->(:Terminal)
WHERE 
    tx.tx_datetime.month = first_of_previous_month.month AND 
    tx.tx_datetime.year = first_of_previous_month.year
WITH
    c, 
    CASE 
        WHEN COUNT(tx) > 0 THEN SUM(tx.tx_amount)
        ELSE NULL
    END AS total_amount_prev_month, 
    CASE 
        WHEN COUNT(tx) > 0 THEN COUNT(tx)
        ELSE NULL
    END AS monthly_freq_prev_month,
    tx_prev_month_all_prev_year_total_amount_avg,
    tx_prev_month_all_prev_year_montly_freq_avg

RETURN
    c, 
    CASE 
        WHEN total_amount_prev_month IS NULL OR tx_prev_month_all_prev_year_total_amount_avg IS NULL THEN NULL
        ELSE total_amount_prev_month < tx_prev_month_all_prev_year_total_amount_avg
    END AS is_under_total_amount_avg_of_same_period,

    CASE 
        WHEN monthly_freq_prev_month IS NULL OR tx_prev_month_all_prev_year_montly_freq_avg IS NULL THEN NULL
        ELSE monthly_freq_prev_month < tx_prev_month_all_prev_year_montly_freq_avg
    END AS is_under_monthly_freq_avg_of_same_period





